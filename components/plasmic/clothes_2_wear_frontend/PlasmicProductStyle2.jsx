// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: E11FOtELibIP
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicProductStyle2.module.css"; // plasmic-import: E11FOtELibIP/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MkJgUqsQnajD/icon

createPlasmicElementProxy;

export const PlasmicProductStyle2__VariantProps = new Array();

export const PlasmicProductStyle2__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductStyle2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div className={classNames(projectcss.all, sty.freeBox__eSz3B)}>
        <div className={classNames(projectcss.all, sty.freeBox__mxdKr)}>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g3Bcg
            )}
          >
            {
              "Hii Guys I am Sunny leone and i want to share my dress code with all of you guys. Only Guys So guys without wasting anymore time lets jump to my dress"
            }
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__sNwJr)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__u98JX
              )}
            >
              {"Buy Now"}
            </div>
            <Icon2Icon
              data-plasmic-name={"svg"}
              data-plasmic-override={overrides.svg}
              className={classNames(projectcss.all, sty.svg)}
              role={"img"}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductStyle2__ArgProps,
          internalVariantPropNames: PlasmicProductStyle2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductStyle2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductStyle2";
  } else {
    func.displayName = `PlasmicProductStyle2.${nodeName}`;
  }
  return func;
}

export const PlasmicProductStyle2 = Object.assign(
  // Top-level PlasmicProductStyle2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicProductStyle2
    internalVariantProps: PlasmicProductStyle2__VariantProps,
    internalArgProps: PlasmicProductStyle2__ArgProps
  }
);

export default PlasmicProductStyle2;
/* prettier-ignore-end */
