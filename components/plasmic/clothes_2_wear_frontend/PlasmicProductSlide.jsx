// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: fr_TEDgfWn9o
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicProductSlide.module.css"; // plasmic-import: fr_TEDgfWn9o/css
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: fHrBi3K8e_fs/icon

createPlasmicElementProxy;

export const PlasmicProductSlide__VariantProps = new Array();

export const PlasmicProductSlide__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProductSlide__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__ggD1T)}
      >
        <Fetcher
          data-plasmic-name={"dataFetcher"}
          data-plasmic-override={overrides.dataFetcher}
          className={classNames("__wab_instance", sty.dataFetcher)}
          dataOp={{
            sourceId: "cACGkgNoT2X3bWvKXWADpN",
            opId: "f544fb51-0b43-44cb-aba0-4eb372270cf3",
            userArgs: {},
            cacheKey: `plasmic.$.J9UtUiPkHnPk.$.f544fb51-0b43-44cb-aba0-4eb372270cf3.$.`,
            invalidatedKeys: null,
            roleId: null
          }}
          queries={{}}
        >
          {$queries => (
            <div
              data-plasmic-name={"productFullStck"}
              data-plasmic-override={overrides.productFullStck}
              className={classNames(projectcss.all, sty.productFullStck)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"296px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"221px"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div
                className={classNames(projectcss.all, sty.freeBox___9Lnqo)}
              />

              <div className={classNames(projectcss.all, sty.freeBox__w8VU2)} />
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ilqgb)}
              >
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__wi7Tn
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Alia Bhatt Suit Anarkali Lehenga with Western Style Blouse";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h1>
                <div
                  data-plasmic-name={"text"}
                  data-plasmic-override={overrides.text}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text
                  )}
                >
                  {
                    "Buy ultimate lehenga saree of alia bhatt with designer aniket pradhan. The world best designer holding more than 500 bn assets compounding interest."
                  }
                </div>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1___0Fa6H
                  )}
                >
                  {"\u20b910,00,000"}
                </h1>
                <h1
                  className={classNames(
                    projectcss.all,
                    projectcss.h1,
                    projectcss.__wab_text,
                    sty.h1__jz45J
                  )}
                >
                  {"\u20b910,00,000"}
                </h1>
                <div className={classNames(projectcss.all, sty.freeBox__nwkbd)}>
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__mFUtg
                    )}
                  >
                    {"Buy now"}
                  </h1>
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg___64LkH)}
                    role={"img"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___9Ooto)}
                >
                  <h1
                    className={classNames(
                      projectcss.all,
                      projectcss.h1,
                      projectcss.__wab_text,
                      sty.h1__lbTZ
                    )}
                  >
                    {"Add to cart"}
                  </h1>
                  <Icon10Icon
                    className={classNames(projectcss.all, sty.svg__rnmsG)}
                    role={"img"}
                  />
                </div>
              </Stack__>
            </div>
          )}
        </Fetcher>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "dataFetcher", "productFullStck", "img", "text"],
  dataFetcher: ["dataFetcher", "productFullStck", "img", "text"],
  productFullStck: ["productFullStck", "img", "text"],
  img: ["img"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProductSlide__ArgProps,
          internalVariantPropNames: PlasmicProductSlide__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProductSlide__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductSlide";
  } else {
    func.displayName = `PlasmicProductSlide.${nodeName}`;
  }
  return func;
}

export const PlasmicProductSlide = Object.assign(
  // Top-level PlasmicProductSlide renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    dataFetcher: makeNodeComponent("dataFetcher"),
    productFullStck: makeNodeComponent("productFullStck"),
    img: makeNodeComponent("img"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicProductSlide
    internalVariantProps: PlasmicProductSlide__VariantProps,
    internalArgProps: PlasmicProductSlide__ArgProps
  }
);

export default PlasmicProductSlide;
/* prettier-ignore-end */
