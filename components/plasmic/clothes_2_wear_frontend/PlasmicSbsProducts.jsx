// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: Z55r6nCTgXdy
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Reveal } from "@plasmicpkgs/react-awesome-reveal";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicSbsProducts.module.css"; // plasmic-import: Z55r6nCTgXdy/css
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: MkJgUqsQnajD/icon

createPlasmicElementProxy;

export const PlasmicSbsProducts__VariantProps = new Array();

export const PlasmicSbsProducts__ArgProps = new Array("currentItem");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSbsProducts__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [isSbsProductHover, triggerSbsProductHoverProps] = useTrigger(
    "useHover",
    {}
  );
  const triggers = {
    hover_sbsProduct: isSbsProductHover
  };
  return (
    <div
      data-plasmic-name={"sbsProduct"}
      data-plasmic-override={overrides.sbsProduct}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.sbsProduct
      )}
      data-plasmic-trigger-props={[triggerSbsProductHoverProps]}
    >
      <Reveal
        className={classNames("__wab_instance", sty.reveal__zc2Bv)}
        effect={"flip"}
        triggerOnce={true}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.currentItem.imageUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Reveal>
      <Reveal
        className={classNames("__wab_instance", sty.reveal__zZok)}
        effect={"fade"}
        triggerOnce={true}
      >
        <div className={classNames(projectcss.all, sty.freeBox__iyKsG)}>
          <div className={classNames(projectcss.all, sty.freeBox___4Aja)}>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__fiS3S
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.currentItem.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Hii Guys I am Sunny leone and i want to share my dress code with all of you guys. Only Guys So guys without wasting anymore time lets jump to my dress";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4WpHs)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__e1EnY
                )}
              >
                {"Buy Now"}
              </div>
              <Icon2Icon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </Reveal>
    </div>
  );
}

const PlasmicDescendants = {
  sbsProduct: ["sbsProduct", "img", "svg"],
  img: ["img"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSbsProducts__ArgProps,
          internalVariantPropNames: PlasmicSbsProducts__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSbsProducts__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sbsProduct") {
    func.displayName = "PlasmicSbsProducts";
  } else {
    func.displayName = `PlasmicSbsProducts.${nodeName}`;
  }
  return func;
}

export const PlasmicSbsProducts = Object.assign(
  // Top-level PlasmicSbsProducts renders the root element
  makeNodeComponent("sbsProduct"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicSbsProducts
    internalVariantProps: PlasmicSbsProducts__VariantProps,
    internalArgProps: PlasmicSbsProducts__ArgProps
  }
);

export default PlasmicSbsProducts;
/* prettier-ignore-end */
