// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dZbt1US7JmqH4GfLm2r4uE
// Component: 74wMr0MHOIvu
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic.module.css"; // plasmic-import: dZbt1US7JmqH4GfLm2r4uE/projectcss
import sty from "./PlasmicAnnouncement.module.css"; // plasmic-import: 74wMr0MHOIvu/css
import AnnouncementIcon1SvgIcon from "./icons/PlasmicIcon__AnnouncementIcon1Svg"; // plasmic-import: KWoQ3St1zhuT/icon

createPlasmicElementProxy;

export const PlasmicAnnouncement__VariantProps = new Array();

export const PlasmicAnnouncement__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAnnouncement__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          arrows: false,
          autoplay: true,
          beforeChange: generateStateOnChangePropForCodeComponents(
            $state,
            "currentSlide",
            ["sliderCarousel", "currentSlide"],
            SliderWrapper_Helpers
          ),
          className: classNames("__wab_instance", sty.sliderCarousel),
          initialSlide: generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"]
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            <div className={classNames(projectcss.all, sty.freeBox__fiZgs)}>
              <div className={classNames(projectcss.all, sty.freeBox__rsXwQ)}>
                <AnnouncementIcon1SvgIcon
                  className={classNames(projectcss.all, sty.svg___0O886)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__mCkMq
                  )}
                >
                  {"Special 25% Discount on First Order Use - MYLOVEANKYY"}
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__tdoYq)}>
              <div className={classNames(projectcss.all, sty.freeBox__eNvoR)}>
                <AnnouncementIcon1SvgIcon
                  className={classNames(projectcss.all, sty.svg__waBeh)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rCKq5
                  )}
                >
                  {"Special 25% Discount on First Order Use - ANKYY"}
                </div>
              </div>
            </div>
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel"],
  sliderCarousel: ["sliderCarousel"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAnnouncement__ArgProps,
          internalVariantPropNames: PlasmicAnnouncement__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAnnouncement__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAnnouncement";
  } else {
    func.displayName = `PlasmicAnnouncement.${nodeName}`;
  }
  return func;
}

export const PlasmicAnnouncement = Object.assign(
  // Top-level PlasmicAnnouncement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    // Metadata about props expected for PlasmicAnnouncement
    internalVariantProps: PlasmicAnnouncement__VariantProps,
    internalArgProps: PlasmicAnnouncement__ArgProps
  }
);

export default PlasmicAnnouncement;
/* prettier-ignore-end */
